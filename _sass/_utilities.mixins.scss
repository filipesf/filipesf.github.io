//=====================================
//
//  MIXINS
//
//=====================================



//-------------------------------------
//  #GRID
//-------------------------------------

// COLUMN GENERATOR
@mixin grid {
  @for $i from 1 through $grid-col-count {
    &--#{$i} {
      width: col-calc($i);
    }
  }
}

// GUTTER
@mixin gutter($gutter: $grid-col-gutter) {
  padding-left: em($gutter / 2);
  padding-right: em($gutter / 2);
}

// CUSTOM COLUMN
@mixin col($i) {
  width: col-calc($i);
}



//-------------------------------------
//  #BEM SELECTORS
//-------------------------------------

// ELEMENT
@mixin e($element) {
  &__#{$element} {
    @content;
  }
}

// MODIFIER
@mixin m($modifier) {
  &--#{$modifier} {
    @content;
  }
}



//-------------------------------------
//  #BACKGROUND IMAGE REPLACEMENT
//-------------------------------------

@mixin background-image($file, $position: center, $size: cover) {
  background-image: url("#{$images-path}/#{$file}");
  background-position: $position;
  background-repeat: no-repeat;
  background-size: $size;
}



//-------------------------------------
//  #FONT SIZE (by @csswizardry)
//-------------------------------------

@mixin font-size($font-size, $line-height: true) {
  font-size: $font-size;
  font-size: ($font-size / $base-size) * 1rem;
  @if $line-height == true {
    line-height: ceil($font-size / $base-line-height) * ($base-line-height / $font-size);
  }
}



//-------------------------------------
//  #PREFIX
//-------------------------------------

@mixin prefix($property, $value...) {
  -webkit-#{$property}: $value;
     -moz-#{$property}: $value;
      -ms-#{$property}: $value;
       -o-#{$property}: $value;
          #{$property}: $value;
}



//-------------------------------------
//  #SIZING
//-------------------------------------

@mixin size($width, $height: $width) {
  height: $height;
  width: $width;
}



//-------------------------------------
//  #BORDER RADIUS
//-------------------------------------

@mixin border-radius($radius: $base-border-radius, $side: all) {
  @if $side == "top" {
    border-top-right-radius: $radius;
    border-top-left-radius: $radius;
  } @else if $side == "right" {
    border-top-right-radius: $radius;
    border-bottom-right-radius: $radius;
  } @else if $side == "bottom" {
    border-bottom-right-radius: $radius;
    border-bottom-left-radius: $radius;
  } @else if $side == "left" {
    border-top-left-radius: $radius;
    border-bottom-left-radius: $radius;
  } @else if $side == "top-right" {
    border-top-right-radius: $radius;
  } @else if $side == "bottom-right" {
    border-bottom-right-radius: $radius;
  } @else if $side == "bottom-left" {
    border-bottom-left-radius: $radius;
  } @else if $side == "top-left" {
    border-top-left-radius: $radius;
  } @else if $side == "all" {
    border-radius: $radius;
  } @else {
    @warn "Invalid border-radius `#{$side}`. Try: top, right, bottom, left, top-right, bottom-right, bottom-left or all.";
  }
}



//-------------------------------------
//  #BOX SHADOW
//-------------------------------------

@mixin box-shadow($h: 0, $v: 0, $blur: 0, $alpha: 0.2, $position: inset, $color: black) {
  @if $h == none {
    @include prefix(box-shadow, none);
  } @else {
    @include prefix(box-shadow, $h $v $blur rgba($color, $alpha) $position);
  }
}



//-------------------------------------
//  #NORMAL & HOVER STATE
//-------------------------------------

@mixin hover($property, $color: primary, $tone: dark) {
  #{$property}: palette($color);
  &:hover {
    #{$property}: palette($color, $tone);
  }
}



//-------------------------------------
//  #COLORS MODIFIER
//-------------------------------------

@mixin color-modifier($property, $map: $palette-default) {
  @each $theme, $color in $map {
    &--#{$theme} {
      @include hover($property, $theme);
      @content;
    }
  }
}



//-------------------------------------
//  #MEDIA QUERIES
//-------------------------------------

@mixin mq($break, $retina: false) {
  @if $break == "small" {
    @if $retina == "retina" {
      @media only screen and (min-width: #{$screen-sm-min}) and (-webkit-min-device-pixel-ratio: #{$device-pixel-ratio}) { @content; }
    } @else {
      @media only screen and (min-width: #{$screen-sm-min}) { @content; }
    }
  } @else if $break == "medium" {
    @if $retina == "retina" {
      @media only screen and (max-width: #{$screen-md-min}) and (-webkit-min-device-pixel-ratio: #{$device-pixel-ratio}) { @content; }
    } @else {
      @media only screen and (min-width: #{$screen-md-min}) { @content; }
    }
  } @else if $break == "large" {
    @media only screen and (min-width: #{$screen-lg-min}) { @content; }
  } @else if $break == "wide" {
    @media only screen and (min-width: #{$screen-wd-min}) { @content; }
  } @else if $break == "small-only" {
    @if $retina == "retina" {
      @media only screen and (min-width: #{$screen-sm-min}) and (max-width: #{$screen-sm-max}) and (-webkit-min-device-pixel-ratio: #{$device-pixel-ratio}) { @content; }
    } @else {
      @media only screen and (min-width: #{$screen-sm-min}) and (max-width: #{$screen-sm-max}) { @content; }
    }
  } @else if $break == "medium-only" {
    @if $retina == "retina" {
      @media only screen and (min-width: #{$screen-md-min}) and (max-width: #{$screen-md-max}) and (-webkit-min-device-pixel-ratio: #{$device-pixel-ratio}) { @content; }
    } @else {
      @media only screen and (min-width: #{$screen-md-min}) and (max-width: #{$screen-md-max}) { @content; }
    }
  } @else if $break == "large-only" {
    @media only screen and (min-width: #{$screen-lg-min}) and (max-width: #{$screen-lg-max}) { @content; }
  } @else {
    @warn "Whoops! No value could be retrieved for `#{$break}`.";
  }
}



//-------------------------------------
//  #HELPERS
//-------------------------------------

// CLEARFIX
@mixin clearfix($extend: false) {
  @if $extend == extend {
    @extend %clearfix;
  } @else {
    &:after{
      content:"";
      display:table;
      clear:both;
    }
  }
}

// HIDE TEXT
@mixin hide-text($extend: false) {
  @if $extend == extend {
    @extend %hide-text;
  } @else {
    font: 0 / 0 a;
    color: transparent;
    text-shadow: none;
  }
}

// CENTER ELEMENT
@mixin centered($extend: false) {
  @if $extend == extend {
    @extend %centered;
  } @else {
    float: none;
    margin-left: auto;
    margin-right: auto;
  }
}

// COLLAPSE COLUMN
@mixin collapsed($extend: false) {
  @if $extend == extend {
    @extend %collapse;
  } @else {
    padding-left: 0;
    padding-right: 0;
  }
}

// EXPAND ELEMENT
@mixin expand($extend: false) {
  @if $extend == extend {
    @extend %expand;
  } @else {
    display: block;
    padding-left: 0;
    padding-right: 0;
    width: 100%;
  }
}


