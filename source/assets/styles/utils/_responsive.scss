/* ==========================================================================
   RESPONSIVE
   ========================================================================== */

/// @group Responsive
/// @type {map}
$responsive-units: (
  small: 320px,
  medium: 768px,
  large: 1024px,
  wide: 1440px
);

/// @group responsive
/// @author Jonathan Suh
/// @require {variable} $responsive-units
/// @require {function} em
/// @param {string} $mq-breakpoint - Screen resolution name
/// @param {map} $mq-breakpoints [$responsive-units] - Breakpoints list
/// @example scss - Simple usage
///   // _foo.scss
///   .foo {
///     background-color: blue;
///
///     @include media-query(small) {
///       background-color: red;
///     }
///   }
///
///   // foo.css
///   .foo {
///     background-color: blue;
///   }
///
///   @media screen and (min-width: 20em) {
///     .foo {
///       background-color: red;
///     }
///   }
///
/// @example scss - Nesting
///   // _bar.scss
///   .bar {
///     background-color: blue;
///
///     @include media-query(small) {
///       background-color: red;
///
///       @include media-query(landscape) {
///         background-color: yellow;
///       }
///     }
///   }
///
///   // bar.css
///   .bar {
///     background-color: blue;
///   }
///
///   @media screen and (min-width: 20em) {
///     .bar {
///       background-color: red;
///     }
///   }
///
///   @media screen and (min-width: 20em) and (orientation:landscape) {
///     .bar {
///       background-color: yellow;
///     }
///   }
@mixin media-query($mq-breakpoint, $mq-breakpoints: $responsive-units) {
  $mq-media-query: "screen and";

  @if $mq-breakpoint == landscape or $mq-breakpoint == portrait {
    $mq-media-query: "#{$mq-media-query} (orientation: #{$mq-breakpoint})";
  } @else if $mq-breakpoint == retina {
    $mq-media-query: "#{$mq-media-query} (-webkit-min-device-pixel-ratio: 2),"+
                     "#{$mq-media-query} (min-resolution: 2dppx)";
  } @else {
    // If $mq-breakpoint is a key that exists in
    // $mq-breakpoints, get and use the value
    @if map-has-key($mq-breakpoints, $mq-breakpoint) {
      $mq-breakpoint: map-get($mq-breakpoints, $mq-breakpoint);
    }
    $mq-media-query: "#{$mq-media-query} (min-width: #{em($mq-breakpoint)})";
  }

  @media #{$mq-media-query} {
    @content;
  }
}
